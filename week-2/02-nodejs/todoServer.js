/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const z = require('zod');
const fs = require('fs')
const app = express();
const path = require('path');
const filePath = path.resolve('./todos.json');
const todos = require('./todos.json')

// Middleware
app.use(bodyParser.json());

//Get all todos
app.get("/todos", function (req, res) {
  res.status(200).json({ data: todos });
});

//Function to filter
function filterTodo(todo, id) {
  if (todo.id == id) {
    return true;
  } else {
    return false;
  }
}

//Get specific todo
app.get("/todos/:id", function (req, res) {

  // Retrieve the id parameter from the request
  const id = parseInt(req.params.id);

  const todo = todos.filter((todo) => filterTodo(todo, id));
  console.log(todo)

  if (todo.length >= 1) {
    res.status(200).send(todo);
  } else {
    res.status(404).send("Not Found");
  }

});

// { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
//post a new todo
app.post("/todos", function (req, res) {

  //Create a schema
  const schema = z.object({
    title: z.string(),
    completed: z.boolean(),
    description: z.string()
  })

  //parse the request body through schema
  const zValidation = schema.safeParse(req.body);
  console.log(zValidation)

  //if schema is mis-matche
  if (!zValidation.success) { // Include the actual error messages in the response
    res.status(400).json({ error: zValidation.error.errors, msg: "Please send details in proper format" });
    return
  }

  const todoLength = todos.length
  const newId = todoLength + 1
  console.log("newId: ", newId)

  req.body["id"] = newId
  console.log("newBody: ", req.body)
  todos.push(req.body)

  console.log(todos)

  fs.writeFile(filePath, JSON.stringify(todos), (error) => {
    if (error) {
      console.error("Error writing to file:", error);
      res.status(500).json({ error: "Internal Server Error" });
    } else {
      res.status(201).send(
        // data: {
        //   msg: "Success",
        //   newTodo: todos.filter((todo) => filterTodo(todo, newId))[0]
        // }
        todos.filter((todo) => filterTodo(todo, newId))[0]
      );
    }
  });

});


// { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
//update an existing todo
app.put("/todos/:id", function (req, res) {

  //Create a schema
  const schema = z.object({
    title: z.string(),
    completed: z.boolean(),
    description: z.string()
  })

  //parse the request body through schema
  const zValidation = schema.safeParse(req.body);
  console.log(zValidation)

  //if schema is mis-matche
  if (!zValidation.success) { // Include the actual error messages in the response
    res.status(400).json({ error: zValidation.error.errors, msg: "Please send details in proper format" });
    return
  }

  //Find the id from URL which needs to be updated
  const idToUpdate = req.params.id

  //Find the item to update
  const todo = todos.filter((todo) => filterTodo(todo, idToUpdate))[0]
  console.log("todo: ", todo)

  const indexOfTodo = todos.indexOf(todo)

  //Run a loop on the input object body to update the todo item
  for (const [key, value] of Object.entries(req.body)) {
    console.log(`${key}: ${value}`);
    todo[key] = value
  }

  console.log('updatedTodo: ', todo)

  //Update the todo in the todos list
  todos[indexOfTodo] = todo

  fs.writeFile(filePath, JSON.stringify(todos), (error) => {
    if (error) {
      console.error("Error writing to file:", error);
      res.status(500).json({ error: "Internal Server Error" });
    } else {
      res.status(201).json({
        data: {
          msg: "Success",
          newTodo: todos.filter((todo) => filterTodo(todo, idToUpdate))[0]
        }
      });
    }
  });

});

//Delete a todo
app.delete("/todos/:id", function (req, res) {

  //Find the id
  const idToDelete = req.params.id
  //Find the todo
  const todo = todos.filter((todo) => filterTodo(todo, idToDelete))[0];
  //Find its index
  const indexOfTodo = todos.indexOf(todo);
  //Remove the item from todos
  todos.splice(indexOfTodo, 1)
  //Update the todos
  fs.writeFile(filePath, JSON.stringify(todos), (error) => {
    if (error) {
      console.error("Error writing to file:", error);
      res.status(500).json({ error: "Internal Server Error" });
    } else {
      res.status(201).json({
        data: {
          msg: "Success",
          updatedTodos: todos
        }
      });
    }
  });

});


app.listen(3000, () => {
  console.log(`Example app listening on port 3000`)
})

module.exports = app;